'use client';

import { useEffect, useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  User,
  Calendar,
  FileText,
  DollarSign,
  CheckCircle,
  AlertCircle,
  Clock,
  Download,
  Eye,
  Edit
} from 'lucide-react';
import { getClaims } from '@/app/services/dashboard';
import { ApiError } from '@/lib/types/settlement';

// Define proper types for API response data
interface ApiClaimDocument {
  id: string;
  document_type: string;
  document_uploaded: boolean;
  created_at: string;
  document_url: string;
}

interface ApiClaimHistory {
  created_at: string;
  description: string;
  status: string;
}

interface ApiClaimClient {
  first_name: string;
  last_name: string;
  email: string;
  phone: string;
}

interface ApiClaimTypeDetails {
  name: string;
}

interface ApiClaim {
  claim_number: string;
  client: ApiClaimClient;
  submission_date: string;
  claim_type_details: ApiClaimTypeDetails;
  status: string;
  estimated_value: number;
  description: string;
  incident_location: string;
  incident_date: string;
  documents: ApiClaimDocument[];
  claim_history: ApiClaimHistory[];
}

interface TransformedClaimDocument {
  id: string;
  name: string;
  type: string;
  size: string;
  uploadedDate: string;
  isUploaded: boolean;
  document_url: string;
}

interface TransformedClaimTimeline {
  date: string;
  action: string;
  description: string;
}

interface TransformedClaimData {
  id: string;
  clientName: string;
  clientEmail: string;
  clientPhone: string;
  submissionDate: string;
  claimType: string;
  status: string;
  documentStatus: number;
  estimatedValue: number;
  description: string;
  incidentLocation: string;
  incidentDate: string;
  documents: TransformedClaimDocument[];
  timeline: TransformedClaimTimeline[];
  daysSinceSubmission: number;
}

interface ClaimDetailsClientProps {
  claimId: string;
}

export default function ClaimDetailsClient({ claimId }: ClaimDetailsClientProps) {
  const [claimData, setClaimData] = useState<ApiClaim | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchClaimData = async () => {
      setLoading(true);
      try {
        const res: unknown = await getClaims();
        console.log(res, "res__");

        // Helper function to safely extract claims data
        const extractClaimsData = (response: unknown): ApiClaim[] => {
          if (Array.isArray(response)) {
            // If response is an array, try to get data from first element
            const firstItem = response[0];
            if (firstItem && typeof firstItem === 'object' && firstItem !== null) {
              if ('data' in firstItem && firstItem.data) {
                if (Array.isArray(firstItem.data)) {
                  return firstItem.data;
                } else if (typeof firstItem.data === 'object' && firstItem.data !== null && 'data' in firstItem.data) {
                  return Array.isArray(firstItem.data.data) ? firstItem.data.data : [];
                }
              }
            }
            return [];
          } else if (response && typeof response === 'object' && response !== null) {
            // If response is an object, try to extract data
            if ('data' in response && response.data) {
              if (Array.isArray(response.data)) {
                return response.data;
              } else if (typeof response.data === 'object' && response.data !== null && 'data' in response.data) {
                return Array.isArray(response.data.data) ? response.data.data : [];
              }
            }
          }
          return [];
        };

        const claimsData = extractClaimsData(res);
        const claim = claimsData.find((claim: ApiClaim) => claim.claim_number === claimId);
        console.log(claim, "claim__111");
        setClaimData(claim || null);
      } catch (err: unknown) {
        const error = err as ApiError;
        console.error('Error fetching claim data:', error?.response?.data?.message);
      } finally {
        setLoading(false);
      }
    };

    fetchClaimData();
  }, [claimId]);

  console.log(claimData, "claim__111");

  function getStatusColor(status: string) {
    const colors = {
      submitted: "bg-yellow-100 text-yellow-800",
      completed: "bg-green-100 text-green-800",
      rejected: "bg-red-100 text-red-800",
      processing: "bg-blue-100 text-blue-800",
    };
    return colors[status as keyof typeof colors] || "bg-gray-100 text-gray-800";
  }

  // Transform claim data for display
  const transformClaimData = (claim: ApiClaim | null): TransformedClaimData | null => {
    if (!claim) return null;

    const uploadedDocs = claim.documents?.filter((doc: ApiClaimDocument) => doc.document_uploaded) || [];
    const totalDocs = claim.documents?.length || 0;
    const documentStatus = totalDocs > 0 ? Math.round((uploadedDocs.length / totalDocs) * 100) : 0;

    // Calculate days since submission
    const submissionDate = new Date(claim.submission_date);
    const today = new Date();
    const daysSinceSubmission = Math.floor((today.getTime() - submissionDate.getTime()) / (1000 * 60 * 60 * 24));

    return {
      id: claim.claim_number,
      clientName: claim.client.first_name + ' ' + claim.client.last_name,
      clientEmail: claim.client.email,
      clientPhone: claim.client.phone,
      submissionDate: submissionDate.toLocaleDateString(),
      claimType: claim.claim_type_details?.name || 'Unknown',
      status: claim.status === 'completed' ? 'Completed' : 'Pending Review',
      documentStatus,
      estimatedValue: claim.estimated_value,
      description: claim.description || 'No description provided',
      incidentLocation: claim.incident_location,
      incidentDate: new Date(claim.incident_date).toLocaleDateString(),
      documents: claim.documents?.map((doc: ApiClaimDocument): TransformedClaimDocument => ({
        id: doc.id,
        name: doc.document_type,
        type: 'pdf',
        size: 'N/A',
        uploadedDate: new Date(doc.created_at).toLocaleDateString(),
        isUploaded: doc.document_uploaded,
        document_url: doc.document_url,
      })) || [],
      timeline: claim.claim_history?.map((history: ApiClaimHistory): TransformedClaimTimeline => ({
        date: new Date(history.created_at).toLocaleDateString(),
        action: history.description,
        description: `Status: ${history.status}`,
      })) || [],
      daysSinceSubmission,
    };
  };

  const transformedClaim = transformClaimData(claimData);

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Claim Details</h1>
            <p className="text-muted-foreground">Claim ID: {claimId}</p>
          </div>
        </div>
        <div className="text-center py-8">
          <FileText className="h-8 w-8 text-gray-400 mx-auto mb-2" />
          <p className="text-sm text-muted-foreground">Loading claim details...</p>
        </div>
      </div>
    );
  }

  if (!transformedClaim) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold">Claim Details</h1>
            <p className="text-muted-foreground">Claim ID: {claimId}</p>
          </div>
        </div>
        <div className="text-center py-8">
          <FileText className="h-8 w-8 text-gray-400 mx-auto mb-2" />
          <p className="text-sm text-muted-foreground">Claim not found</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Claim Details</h1>
          <p className="text-muted-foreground">Claim ID: {claimId}</p>
        </div>
        <div className="flex items-center gap-2">
          <Button variant="outline" size="sm">
            <Download className="h-4 w-4 mr-2" />
            Export
          </Button>
          <Button variant="outline" size="sm">
            <Edit className="h-4 w-4 mr-2" />
            Edit
          </Button>
        </div>
      </div>

      {/* Status and Days Since Submission */}
      <div className="flex items-center gap-6">
        <div className="flex items-center gap-2">
          <span className="text-sm font-medium text-muted-foreground">Status:</span>
          <Badge className={getStatusColor(claimData?.status || 'submitted')}>
            {transformedClaim.status}
          </Badge>
        </div>
        <div className="flex items-center gap-2">
          <Calendar className="h-4 w-4 text-muted-foreground" />
          <span className="text-sm font-medium text-muted-foreground">Days Since Submission:</span>
          <span className="text-sm font-medium">{transformedClaim.daysSinceSubmission}</span>
        </div>
      </div>

      {/* Overview Section */}
      <div className="grid gap-6">
        {/* All Information - Single Card */}
        <Card>
          <CardContent className="space-y-8 pt-6">
            {/* Client Information */}
            <div>
              <h4 className="text-sm font-medium text-muted-foreground mb-3">Client Information</h4>
              <div className="flex items-center gap-2">
                <User className="h-4 w-4 text-muted-foreground" />
                <div>
                  <p className="font-medium">{transformedClaim.clientName}</p>
                  <p className="text-sm text-muted-foreground">{transformedClaim.clientEmail}</p>
                  <p className="text-sm text-muted-foreground">{transformedClaim.clientPhone}</p>
                </div>
              </div>
            </div>

            {/* Claim Information */}
            <div>
              <h4 className="text-sm font-medium text-muted-foreground mb-3">Claim Information</h4>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm font-medium">Claim Type:</span>
                  <span className="text-sm">{transformedClaim.claimType}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm font-medium">Submission Date:</span>
                  <span className="text-sm">{transformedClaim.submissionDate}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm font-medium">Incident Date:</span>
                  <span className="text-sm">{transformedClaim.incidentDate}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm font-medium">Incident Location:</span>
                  <span className="text-sm">{transformedClaim.incidentLocation}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm font-medium">Estimated Value:</span>
                  <span className="text-sm">₦{transformedClaim.estimatedValue.toLocaleString()}</span>
                </div>
              </div>
            </div>

            {/* Description */}
            <div>
              <h4 className="text-sm font-medium text-muted-foreground mb-3">Description</h4>
              <p className="text-sm text-muted-foreground">{transformedClaim.description}</p>
            </div>

            {/* Documents Section */}
            <div>
              <h4 className="text-sm font-medium text-muted-foreground mb-3">Uploaded Documents</h4>
              <div className="space-y-4">
                {transformedClaim.documents.length === 0 ? (
                <div className="text-center py-8">
                  <FileText className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-muted-foreground">No documents uploaded yet</p>
                </div>
              ) : (
                transformedClaim.documents.map((doc: TransformedClaimDocument) => (
                  <div key={doc.id} className="flex items-center justify-between p-3 border rounded-lg">
                    <div className="flex items-center gap-3">
                      <FileText className="h-5 w-5 text-muted-foreground" />
                      <div>
                        <p className="font-medium">{doc.name}</p>
                        <p className="text-sm text-muted-foreground">
                          {doc.type.toUpperCase()} • {doc.size} • Uploaded {doc.uploadedDate}
                        </p>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button onClick={() => window.open(doc.document_url, '_blank')} variant="ghost" size="sm">
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button onClick={() => window.open(doc.document_url, '_blank')} variant="ghost" size="sm">
                        <Download className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                ))
              )}
            </div>

            {/* Timeline Section */}
            <div>
              <h4 className="text-sm font-medium text-muted-foreground mb-3">Claim Timeline</h4>
              <div className="space-y-4">
                {transformedClaim.timeline.length === 0 ? (
                  <div className="text-center py-8">
                    <Clock className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                    <p className="text-sm text-muted-foreground">No timeline events found</p>
                  </div>
                ) : (
                  transformedClaim.timeline.map((event: TransformedClaimTimeline, index: number) => (
                    <div key={index} className="flex items-start gap-3">
                      <div className="flex flex-col items-center">
                        <div className="w-3 h-3 bg-primary rounded-full"></div>
                        {index < transformedClaim.timeline.length - 1 && (
                          <div className="w-0.5 h-8 bg-gray-200 mt-1"></div>
                        )}
                      </div>
                      <div className="flex-1">
                        <p className="font-medium">{event.action}</p>
                        <p className="text-sm text-muted-foreground">{event.description}</p>
                        <p className="text-xs text-muted-foreground">{event.date}</p>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>

            {/* Actions Section */}
            <div>
              <h4 className="text-sm font-medium text-muted-foreground mb-3">Available Actions</h4>
              <div className="grid gap-4 md:grid-cols-2">
                <Button className="w-full" variant="outline">
                  <CheckCircle className="h-4 w-4 mr-2" />
                  Approve Claim
                </Button>
                <Button className="w-full" variant="outline">
                  <AlertCircle className="h-4 w-4 mr-2" />
                  Request More Info
                </Button>
                <Button className="w-full" variant="outline">
                  <Edit className="h-4 w-4 mr-2" />
                  Edit Claim
                </Button>
                <Button className="w-full" variant="outline">
                  <Download className="h-4 w-4 mr-2" />
                  Export Details
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}